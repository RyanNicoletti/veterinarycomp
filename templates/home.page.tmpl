{{template "base" .}}
{{define "content"}}
<link rel="stylesheet" type="text/css" href="/static/css/home.css" />
<div class="button-search-wrapper">
  <div class="comp-filter">
    <span>Search:</span>
    <input
      type="text"
      id="filter-text-box"
      placeholder="Filter..."
      oninput="onFilterTextBoxChanged()" />
  </div>
  <div class="add-comp-button">
    <a href="/add-comp"><button>Add Compensation</button></a>
  </div>
</div>
<div id="compGrid" class="ag-theme-quartz comp-table"></div>
{{ end }}

<script>
      const formatWithCommas = (value) => {
        return new Intl.NumberFormat("en-US").format(value);
      };

      function jobTitleCellRenderer(params) {
        return `<div>${params.data.JobTitle}</div>
                <div>(${params.data.PracticeType})</div>`;
      }

      function onFilterTextBoxChanged() {
        gridApi.setGridOption(
          'quickFilterText',
          document.getElementById('filter-text-box').value
        );
      }

      function locationCellRenderer(params) {
        let location = '';
        if (params.data.Country === 'United States') {
            if (params.data.City) {
                location = `${params.data.City}, ${params.data.State}`;
            } else {
                location = params.data.State;
            }
        } else {
            if (params.data.City) {
                location = `${params.data.Country}, ${params.data.City}, ${params.data.State}`;
            } else {
                location = `${params.data.Country}, ${params.data.State}`;
            }
        }
        return `<div>${params.data.CompanyName}</div>
                <div>(${location})</div>`;
      }

      function compensationCellRenderer(params) {
      let content = '';

      if (params.data.IsHourly) {
          content += `<div class="total-comp">Hourly Rate: \$${formatWithCommas(params.data.HourlyRate)}</div>`;
      } else {
          content += `<div class="total-comp">Total Comp: \$${formatWithCommas(params.data.TotalCompensation)}</div>
                      <div class="other-comp">Base Salary: \$${formatWithCommas(params.data.BaseSalary)}</div>`;
      }

      if (params.data.SignOnBonus !== 0) {
          content += `<div class="other-comp">Sign on Bonus: \$${formatWithCommas(params.data.SignOnBonus)}</div>`;
      }

      if (params.data.Production !== 0) {
          content += `<div class="other-comp">Production: \$${formatWithCommas(params.data.Production)}</div>`;
      }

      return content;
  }


      let gridData = {{.Data.compensations}}
      let gridApi;
      const gridOptions = {
        rowData: [],
        columnDefs: [
            {
                headerName: 'Company/Hospital',
                field: 'CompanyName',
                filter: true,
                wrapText: true,
                cellRenderer: locationCellRenderer,
                flex: 1
            },
            {
              headerName: 'Hidden',
              field: 'State',
              hide: true,
            },
            {
              headerName: 'Hidden',
              field: 'City',
              hide: true,
            },
            {
              headerName: 'Hidden',
              field: 'Country',
              hide: true,
            },
            {
                headerName: `Job Title`,
                field: 'JobTitle',
                autoHeight: true,
                wrapText: true,
                cellRenderer: jobTitleCellRenderer,
                flex: 1
            },
            {
                headerName: 'Years of Experience',
                field: 'YearsExperience',
                width: 120
            },
            {
                headerName: 'Compensation (USD)',
                field: 'TotalCompensation',
                autoHeight: true,
                cellRenderer: compensationCellRenderer,
                flex: 1
            }
        ],
        defaultColDef: {
          wrapHeaderText: true,
          autoHeaderHeight: true,
        },
         pagination: true,
         paginationPageSize: 10,
         paginationPageSizeSelector: [10, 20, 30],
         includeHiddenColumnsInQuickFilter: true
      };
      gridApi = agGrid.createGrid(document.querySelector('#compGrid'), gridOptions)
      gridApi.setGridOption('rowData', gridData)
      gridApi.redrawRows();
</script>
